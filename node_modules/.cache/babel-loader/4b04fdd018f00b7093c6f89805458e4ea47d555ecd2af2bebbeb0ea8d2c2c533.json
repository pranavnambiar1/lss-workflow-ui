{"ast":null,"code":"var _jsxFileName = \"/Users/pranav.nambiar/Documents/lss-workflow-ui/src/components/WorkflowBuilder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useRef } from 'react';\nimport { Box, Typography, Chip, Button } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, Controls, Background, BackgroundVariant } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport ApiSidebar from './ApiSidebar';\nimport JobsPanel from './JobsPanel';\nimport ResponseSelectorModal from './ResponseSelectorModal';\nimport TaskNode from './TaskNode';\nimport ApiNode from './ApiNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorkflowBuilder = ({\n  workflowState,\n  setWorkflowState\n}) => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [isResponseModalOpen, setIsResponseModalOpen] = useState(false);\n  const [pendingConnection, setPendingConnection] = useState(null);\n  const [selectedTask, setSelectedTask] = useState(null);\n\n  // Audio references for sound effects\n  const clickSoundRef = useRef(null);\n  const dropSoundRef = useRef(null);\n  const connectSoundRef = useRef(null);\n\n  // Initialize audio elements\n  React.useEffect(() => {\n    clickSoundRef.current = new Audio('/sounds/click.mp3');\n    dropSoundRef.current = new Audio('/sounds/drop.mp3');\n    connectSoundRef.current = new Audio('/sounds/connect.mp3');\n  }, []);\n\n  // Handle task selection\n  const handleTaskSelect = useCallback(task => {\n    // Play click sound\n    if (clickSoundRef.current) {\n      clickSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n    }\n    setSelectedTask(task);\n\n    // Create a new task node in the workflow\n    const taskNode = {\n      id: `task-${task.id}-${Date.now()}`,\n      type: 'task',\n      // Special node type for tasks\n      data: {\n        label: task.name,\n        task: task,\n        isTask: true // Flag to identify task nodes\n      },\n      position: {\n        x: 100,\n        y: 100 + nodes.length * 10 % 300\n      } // Position the task node\n    };\n    setNodes(nds => [...nds, taskNode]);\n  }, [nodes]);\n\n  // Handle API node drop\n  const handleApiDrop = useCallback(apiNodeData => {\n    // Play drop sound\n    if (dropSoundRef.current) {\n      dropSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n    }\n    try {\n      var _parsedData$api, _parsedData$data, _parsedData$api2, _parsedData$data2, _parsedData$data2$api, _parsedData$api3, _parsedData$data3, _parsedData$data3$api;\n      console.log('Raw API drop data:', apiNodeData);\n\n      // Parse the API data if it's a string (from drag and drop)\n      let parsedData = typeof apiNodeData === 'string' ? JSON.parse(apiNodeData) : apiNodeData;\n      console.log('Parsed API data:', parsedData);\n\n      // If the parsed data has a data property (from ReactFlow drag/drop), extract it\n      if (parsedData.data) {\n        console.log('Found nested data structure, extracting...');\n        // Keep the original parsed data for reference\n        const originalData = parsedData;\n\n        // If there's an api object in the data, prioritize that\n        if (parsedData.data.api) {\n          console.log('Found API object in data.api');\n          // Merge the data structure to ensure we have all properties\n          parsedData = {\n            ...parsedData,\n            ...parsedData.data,\n            api: parsedData.data.api\n          };\n        } else {\n          // Otherwise just merge with the data object\n          parsedData = {\n            ...parsedData,\n            ...parsedData.data\n          };\n        }\n        console.log('Restructured data:', parsedData);\n      }\n\n      // Extract API name with extensive fallbacks\n      let apiName = '';\n      if (parsedData.api && parsedData.api.name) {\n        apiName = parsedData.api.name;\n      } else if (parsedData.name) {\n        apiName = parsedData.name;\n      } else if (parsedData.label) {\n        apiName = parsedData.label;\n      } else if (parsedData.data && parsedData.data.name) {\n        apiName = parsedData.data.name;\n      } else if (parsedData.data && parsedData.data.label) {\n        apiName = parsedData.data.label;\n      } else {\n        apiName = 'API Node';\n      }\n      console.log('Extracted API name:', apiName);\n\n      // Extract description with fallbacks\n      const apiDescription = ((_parsedData$api = parsedData.api) === null || _parsedData$api === void 0 ? void 0 : _parsedData$api.description) || parsedData.description || ((_parsedData$data = parsedData.data) === null || _parsedData$data === void 0 ? void 0 : _parsedData$data.description) || '';\n\n      // Get responses and category with fallbacks\n      const responses = ((_parsedData$api2 = parsedData.api) === null || _parsedData$api2 === void 0 ? void 0 : _parsedData$api2.responses) || parsedData.responses || ((_parsedData$data2 = parsedData.data) === null || _parsedData$data2 === void 0 ? void 0 : (_parsedData$data2$api = _parsedData$data2.api) === null || _parsedData$data2$api === void 0 ? void 0 : _parsedData$data2$api.responses) || [];\n      const category = ((_parsedData$api3 = parsedData.api) === null || _parsedData$api3 === void 0 ? void 0 : _parsedData$api3.category) || parsedData.category || ((_parsedData$data3 = parsedData.data) === null || _parsedData$data3 === void 0 ? void 0 : (_parsedData$data3$api = _parsedData$data3.api) === null || _parsedData$data3$api === void 0 ? void 0 : _parsedData$data3$api.category) || '';\n\n      // Create a new API node with the provided data\n      const apiNode = {\n        id: `api-${Date.now()}`,\n        type: 'api',\n        // Explicitly set the type to 'api'\n        position: {\n          x: 400,\n          y: 100 + nodes.length * 10 % 300\n        },\n        // Position the API node\n        data: {\n          label: apiName,\n          // Set label for display\n          name: apiName,\n          // Ensure name is set\n          description: apiDescription,\n          api: {\n            name: apiName,\n            // Ensure API name is set\n            description: apiDescription,\n            responses: responses,\n            category: category\n          },\n          isApi: true // Additional flag to identify API nodes\n        }\n      };\n      console.log('Created API node:', apiNode);\n      setNodes(nds => [...nds, apiNode]);\n    } catch (error) {\n      console.error('Error handling API drop:', error);\n    }\n  }, [nodes]);\n\n  // Custom connection validation\n  const isValidConnection = useCallback(connection => {\n    // Get source and target nodes\n    const sourceNode = nodes.find(node => node.id === connection.source);\n    const targetNode = nodes.find(node => node.id === connection.target);\n\n    // Allow connections from task nodes to API nodes\n    if ((sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.type) === 'task' && (targetNode === null || targetNode === void 0 ? void 0 : targetNode.type) === 'api') {\n      // Play connect sound on valid connection attempt\n      if (connectSoundRef.current) {\n        connectSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n      }\n      return true;\n    }\n\n    // Allow connections between API nodes (for sequential ordering)\n    if ((sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.type) === 'api' && (targetNode === null || targetNode === void 0 ? void 0 : targetNode.type) === 'api') {\n      // Check if connecting from bottom to top (proper direction)\n      if (connection.sourceHandle === 'bottom' && connection.targetHandle === 'top') {\n        // Play connect sound on valid connection attempt\n        if (connectSoundRef.current) {\n          connectSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n        }\n        return true;\n      }\n    }\n    return false;\n  }, [nodes]);\n  const onConnect = useCallback(params => {\n    // Validate connection\n    if (isValidConnection(params)) {\n      // Get source and target nodes\n      const sourceNode = nodes.find(node => node.id === params.source);\n      const targetNode = nodes.find(node => node.id === params.target);\n\n      // Only show response selector for API-to-API connections\n      if ((sourceNode === null || sourceNode === void 0 ? void 0 : sourceNode.type) === 'api' && (targetNode === null || targetNode === void 0 ? void 0 : targetNode.type) === 'api') {\n        // Open response selector modal when connecting APIs\n        setPendingConnection(params);\n        setIsResponseModalOpen(true);\n      } else {\n        // For task-to-API connections, create the edge directly\n        setEdges(eds => addEdge({\n          ...params,\n          animated: true\n        }, eds));\n      }\n    }\n  }, [isValidConnection, nodes, setEdges]);\n\n  // Define node types for ReactFlow\n  const nodeTypes = React.useMemo(() => ({\n    task: TaskNode,\n    api: ApiNode\n  }), []);\n\n  // Traverse workflow and export as JSON\n  const traverseWorkflow = useCallback(() => {\n    // Create a dot element for animation\n    const dotElement = document.createElement('div');\n    dotElement.style.position = 'absolute';\n    dotElement.style.width = '15px';\n    dotElement.style.height = '15px';\n    dotElement.style.backgroundColor = '#ff5722';\n    dotElement.style.borderRadius = '50%';\n    dotElement.style.zIndex = '1000';\n    dotElement.style.transition = 'all 0.5s ease';\n\n    // Add the dot to the ReactFlow container\n    const reactFlowContainer = document.querySelector('.react-flow');\n    if (reactFlowContainer) {\n      reactFlowContainer.appendChild(dotElement);\n\n      // Get all task nodes\n      const taskNodes = nodes.filter(node => node.type === 'task');\n\n      // Get all API nodes\n      const apiNodes = nodes.filter(node => node.type === 'api');\n\n      // Get all edges\n      const workflowEdges = edges;\n\n      // Start animation from the first task node\n      if (taskNodes.length > 0) {\n        const startNode = taskNodes[0];\n        const nodeElement = document.querySelector(`[data-id=\"${startNode.id}\"]`);\n        if (nodeElement) {\n          const rect = nodeElement.getBoundingClientRect();\n          const containerRect = reactFlowContainer.getBoundingClientRect();\n\n          // Position the dot at the start node\n          dotElement.style.left = `${rect.left - containerRect.left + rect.width / 2 - 7.5}px`;\n          dotElement.style.top = `${rect.top - containerRect.top + rect.height / 2 - 7.5}px`;\n\n          // Start the animation\n          setTimeout(() => animateWorkflow(dotElement, taskNodes, apiNodes, workflowEdges, 0), 500);\n        }\n      }\n    }\n  }, [nodes, edges]);\n\n  // Animate the workflow traversal\n  const animateWorkflow = useCallback((dotElement, taskNodes, apiNodes, workflowEdges, currentIndex) => {\n    // If we've gone through all nodes, export the JSON\n    if (currentIndex >= taskNodes.length + apiNodes.length) {\n      // Remove the dot element\n      dotElement.remove();\n\n      // Export the workflow as JSON\n      exportWorkflowAsJson();\n      return;\n    }\n\n    // Determine the next node to animate to\n    let nextNode;\n    if (currentIndex < taskNodes.length) {\n      // Animate to the next task node\n      nextNode = taskNodes[currentIndex];\n    } else {\n      // Animate to the API nodes\n      nextNode = apiNodes[currentIndex - taskNodes.length];\n    }\n\n    // Find the element for the next node\n    const nodeElement = document.querySelector(`[data-id=\"${nextNode.id}\"]`);\n    if (nodeElement) {\n      const rect = nodeElement.getBoundingClientRect();\n      const reactFlowElement = document.querySelector('.react-flow');\n      if (!reactFlowElement) return;\n      const containerRect = reactFlowElement.getBoundingClientRect();\n\n      // Animate the dot to the next node\n      dotElement.style.left = `${rect.left - containerRect.left + rect.width / 2 - 7.5}px`;\n      dotElement.style.top = `${rect.top - containerRect.top + rect.height / 2 - 7.5}px`;\n\n      // Highlight the node\n      nodeElement.classList.add('highlighted');\n      setTimeout(() => nodeElement.classList.remove('highlighted'), 500);\n\n      // Continue to the next node after a delay\n      setTimeout(() => animateWorkflow(dotElement, taskNodes, apiNodes, workflowEdges, currentIndex + 1), 800);\n    } else {\n      // Skip to the next node if this one isn't found\n      setTimeout(() => animateWorkflow(dotElement, taskNodes, apiNodes, workflowEdges, currentIndex + 1), 100);\n    }\n  }, []);\n\n  // Export the workflow as JSON\n  const exportWorkflowAsJson = useCallback(() => {\n    console.log('Starting JSON export...');\n    console.log('All nodes:', nodes);\n\n    // Enhanced API node detection - use multiple detection methods with more detailed logging\n    const apiNodes = nodes.filter(node => {\n      console.log(`Checking node for API - ID: ${node.id}, Type: ${node.type}`, node);\n      console.log('Node data:', node.data);\n\n      // Check if node is an API node using various properties\n      const isApiType = node.type === 'api';\n      const hasApiFlag = node.data && node.data.isApi === true;\n      const hasApiData = node.data && node.data.api;\n      const hasApiId = node.id && node.id.startsWith('api-');\n      console.log(`API detection results - isApiType: ${isApiType}, hasApiFlag: ${hasApiFlag}, hasApiData: ${hasApiData}, hasApiId: ${hasApiId}`);\n      return isApiType || hasApiFlag || hasApiData || hasApiId;\n    });\n    console.log(`API nodes detected: ${apiNodes.length}`, apiNodes);\n\n    // Always use the detected API nodes - no fallback to non-API nodes\n    // This ensures we only generate JSON for actual API nodes\n    let finalApiNodes = apiNodes;\n\n    // Create the JSON structure as specified\n    const workflowJson = finalApiNodes.map(node => {\n      console.log('Processing node:', node);\n      // Get the node data\n      const nodeData = node.data || {};\n      const nodeId = node.id;\n\n      // Find connected task node (incoming connection to this API)\n      const incomingEdges = edges.filter(edge => edge.target === nodeId);\n      console.log('Incoming edges:', incomingEdges);\n      let connectedTaskNode = null;\n      let eventGroup = null;\n      if (incomingEdges.length > 0) {\n        const sourceNodeId = incomingEdges[0].source;\n        connectedTaskNode = nodes.find(n => n.id === sourceNodeId && (n.type === 'task' || n.data && n.data.task));\n        console.log('Connected task node:', connectedTaskNode);\n        if (connectedTaskNode && connectedTaskNode.data && connectedTaskNode.data.task) {\n          eventGroup = connectedTaskNode.data.task.name;\n        }\n      }\n\n      // Generate a unique ID for the touchpoint\n      const touchpointId = `${Math.random().toString(36).substring(2, 15)}-${Math.random().toString(36).substring(2, 15)}`;\n\n      // Get API name safely\n      let apiName = '';\n      if (nodeData.api && nodeData.api.name) {\n        apiName = nodeData.api.name;\n      } else if (nodeData.label) {\n        apiName = nodeData.label;\n      } else {\n        apiName = `api_${nodeId}`;\n      }\n      console.log('API name:', apiName, 'Event group:', eventGroup);\n\n      // Create the base JSON structure exactly matching the provided sample\n      const jsonItem = {\n        id: String(Math.floor(Math.random() * 1000)),\n        // Random ID between 0-999\n        investor_name: workflowState.lenderName.toLowerCase(),\n        api_name: apiName,\n        retry_config: {\n          max_retry: 4,\n          retry_interval: 400\n        },\n        failure_retry_config: null,\n        event_group: eventGroup,\n        order: 1,\n        integration_type: 4,\n        http_method: 1,\n        investor_workflow_id: \"3\",\n        timeout: null,\n        domain: \"\",\n        end_point: \"\",\n        api_for: 19,\n        api_type: 0,\n        action_on_success_1: [],\n        action_on_success_2: [],\n        action_on_success_3: [],\n        action_on_failure_1: [],\n        action_on_failure_2: [],\n        param_conditions: {},\n        hold_api_call: false,\n        delay_trigger: 0,\n        inter_loan_gap: 0,\n        execution: 0,\n        trigger_child_api_if_conditions_not_met: false,\n        should_retry_if_conditions_not_met: false,\n        skip_unique_validation: false,\n        enable_touchpoint: true,\n        auth_api_name: null,\n        require_encryption: true,\n        document_details: {},\n        dedupe_check: false,\n        mock_server: false,\n        data_points_values: [],\n        lss_touchpoint_id: touchpointId,\n        investor_configuration_id: \"55\",\n        created_at: new Date().toISOString().replace('T', ' ').substring(0, 19),\n        updated_at: new Date().toISOString().replace('T', ' ').substring(0, 19),\n        dependent_event_group: null,\n        ysf_config: {}\n      };\n\n      // Find connected API nodes for success actions (outgoing connections from this API)\n      const outgoingEdges = edges.filter(edge => edge.source === nodeId);\n      console.log('Outgoing edges:', outgoingEdges);\n      if (outgoingEdges.length > 0) {\n        // Group target APIs by action index\n        const successActions = {\n          action_on_success_1: [],\n          action_on_success_2: [],\n          action_on_success_3: []\n        };\n        outgoingEdges.forEach((edge, index) => {\n          if (index < 3) {\n            // Only handle up to 3 success actions\n            const targetNode = nodes.find(n => n.id === edge.target);\n            console.log('Target node for success action:', targetNode);\n            if (targetNode) {\n              let targetApiName = '';\n              if (targetNode.data && targetNode.data.api && targetNode.data.api.name) {\n                targetApiName = targetNode.data.api.name;\n              } else if (targetNode.data && targetNode.data.label) {\n                targetApiName = targetNode.data.label;\n              } else {\n                targetApiName = `api_${targetNode.id}`;\n              }\n              const actionKey = `action_on_success_${index + 1}`;\n              successActions[actionKey].push(targetApiName);\n              console.log(`Adding to ${actionKey}:`, targetApiName);\n            }\n          }\n        });\n\n        // Assign the success actions to the JSON item\n        jsonItem.action_on_success_1 = successActions.action_on_success_1;\n        jsonItem.action_on_success_2 = successActions.action_on_success_2;\n        jsonItem.action_on_success_3 = successActions.action_on_success_3;\n      }\n      return jsonItem;\n    });\n\n    // Display the JSON in the console\n    console.log('Final JSON output:', JSON.stringify(workflowJson, null, 2));\n\n    // If the JSON is empty, show an error message instead of creating a fallback\n    if (workflowJson.length === 0) {\n      console.log('No API nodes found in the workflow');\n      alert('Error: No API nodes detected in the workflow. Please add API nodes by dragging them from the sidebar.');\n      return; // Exit without creating a fallback JSON\n    }\n    // Create a downloadable JSON file\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(workflowJson));\n    const downloadAnchorNode = document.createElement('a');\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", `${workflowState.lenderName}_workflow.json`);\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n\n    // Show a success message\n    alert('Workflow exported successfully!');\n  }, [nodes, edges, workflowState]);\n  const handleResponseSelection = useCallback(responseId => {\n    if (pendingConnection) {\n      const newEdge = {\n        ...pendingConnection,\n        id: `edge-${pendingConnection.source}-${pendingConnection.target}`,\n        data: {\n          responseId\n        }\n      };\n      setEdges(eds => addEdge(newEdge, eds));\n      setPendingConnection(null);\n\n      // Play connect sound when connection is completed\n      if (connectSoundRef.current) {\n        connectSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n      }\n    }\n    setIsResponseModalOpen(false);\n  }, [pendingConnection, setEdges]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: '100vh',\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        zIndex: 1000,\n        backgroundColor: 'white',\n        borderBottom: '1px solid #e0e0e0',\n        p: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"LSS Workflow Builder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          label: `Asset: ${workflowState.assetClass}`,\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          label: `Lender: ${workflowState.lenderName}`,\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          startIcon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 24\n          }, this),\n          onClick: () => {\n            // Reset the workflow state and go back to setup form\n            setWorkflowState({\n              assetClass: '',\n              lenderName: '',\n              nodes: [],\n              edges: []\n            });\n          },\n          sx: {\n            mr: 2\n          },\n          children: \"Back to Setup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"success\",\n          onClick: () => traverseWorkflow(),\n          disabled: nodes.length === 0,\n          children: \"Traverse & Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ApiSidebar, {\n      lenderName: workflowState.lenderName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1,\n        mt: 8\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        nodeTypes: nodeTypes,\n        fitView: true\n        // Using default connection mode\n        ,\n        defaultEdgeOptions: {\n          animated: true\n        },\n        onDrop: event => {\n          event.preventDefault();\n          const data = event.dataTransfer.getData('application/reactflow');\n          if (data) {\n            // Get the position where the node was dropped\n            const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n            const position = {\n              x: event.clientX - reactFlowBounds.left,\n              y: event.clientY - reactFlowBounds.top\n            };\n\n            // Handle the API drop with the position\n            handleApiDrop(data);\n          }\n        },\n        onDragOver: event => {\n          event.preventDefault();\n          event.dataTransfer.dropEffect = 'move';\n        },\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          variant: BackgroundVariant.Dots,\n          gap: 20,\n          size: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JobsPanel, {\n      onNodeAdd: node => {\n        // Handle API node addition\n        handleApiDrop(node);\n      },\n      onTaskSelect: handleTaskSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponseSelectorModal, {\n      open: isResponseModalOpen,\n      onClose: () => {\n        setIsResponseModalOpen(false);\n        setPendingConnection(null);\n      },\n      onSelect: handleResponseSelection,\n      sourceNodeId: (pendingConnection === null || pendingConnection === void 0 ? void 0 : pendingConnection.source) || ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 531,\n    columnNumber: 5\n  }, this);\n};\n_s(WorkflowBuilder, \"qVm5Ud7YyXoKkd218DUfpwMeefE=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = WorkflowBuilder;\nexport default WorkflowBuilder;\nvar _c;\n$RefreshReg$(_c, \"WorkflowBuilder\");","map":{"version":3,"names":["React","useCallback","useState","useRef","Box","Typography","Chip","Button","ArrowBackIcon","ReactFlow","addEdge","useNodesState","useEdgesState","Controls","Background","BackgroundVariant","ApiSidebar","JobsPanel","ResponseSelectorModal","TaskNode","ApiNode","jsxDEV","_jsxDEV","WorkflowBuilder","workflowState","setWorkflowState","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","isResponseModalOpen","setIsResponseModalOpen","pendingConnection","setPendingConnection","selectedTask","setSelectedTask","clickSoundRef","dropSoundRef","connectSoundRef","useEffect","current","Audio","handleTaskSelect","task","play","catch","e","console","log","taskNode","id","Date","now","type","data","label","name","isTask","position","x","y","length","nds","handleApiDrop","apiNodeData","_parsedData$api","_parsedData$data","_parsedData$api2","_parsedData$data2","_parsedData$data2$api","_parsedData$api3","_parsedData$data3","_parsedData$data3$api","parsedData","JSON","parse","originalData","api","apiName","apiDescription","description","responses","category","apiNode","isApi","error","isValidConnection","connection","sourceNode","find","node","source","targetNode","target","sourceHandle","targetHandle","onConnect","params","eds","animated","nodeTypes","useMemo","traverseWorkflow","dotElement","document","createElement","style","width","height","backgroundColor","borderRadius","zIndex","transition","reactFlowContainer","querySelector","appendChild","taskNodes","filter","apiNodes","workflowEdges","startNode","nodeElement","rect","getBoundingClientRect","containerRect","left","top","setTimeout","animateWorkflow","currentIndex","remove","exportWorkflowAsJson","nextNode","reactFlowElement","classList","add","isApiType","hasApiFlag","hasApiData","hasApiId","startsWith","finalApiNodes","workflowJson","map","nodeData","nodeId","incomingEdges","edge","connectedTaskNode","eventGroup","sourceNodeId","n","touchpointId","Math","random","toString","substring","jsonItem","String","floor","investor_name","lenderName","toLowerCase","api_name","retry_config","max_retry","retry_interval","failure_retry_config","event_group","order","integration_type","http_method","investor_workflow_id","timeout","domain","end_point","api_for","api_type","action_on_success_1","action_on_success_2","action_on_success_3","action_on_failure_1","action_on_failure_2","param_conditions","hold_api_call","delay_trigger","inter_loan_gap","execution","trigger_child_api_if_conditions_not_met","should_retry_if_conditions_not_met","skip_unique_validation","enable_touchpoint","auth_api_name","require_encryption","document_details","dedupe_check","mock_server","data_points_values","lss_touchpoint_id","investor_configuration_id","created_at","toISOString","replace","updated_at","dependent_event_group","ysf_config","outgoingEdges","successActions","forEach","index","targetApiName","actionKey","push","stringify","alert","dataStr","encodeURIComponent","downloadAnchorNode","setAttribute","body","click","handleResponseSelection","responseId","newEdge","sx","display","children","right","borderBottom","p","alignItems","gap","variant","fileName","_jsxFileName","lineNumber","columnNumber","assetClass","color","startIcon","onClick","mr","disabled","flex","mt","fitView","defaultEdgeOptions","onDrop","event","preventDefault","dataTransfer","getData","reactFlowBounds","currentTarget","clientX","clientY","onDragOver","dropEffect","Dots","size","onNodeAdd","onTaskSelect","open","onClose","onSelect","_c","$RefreshReg$"],"sources":["/Users/pranav.nambiar/Documents/lss-workflow-ui/src/components/WorkflowBuilder.tsx"],"sourcesContent":["import React, { useCallback, useState, useRef } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Chip,\n  Button,\n} from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport ReactFlow, {\n  Node,\n  Edge,\n  addEdge,\n  Connection,\n  useNodesState,\n  useEdgesState,\n  Controls,\n  Background,\n  BackgroundVariant,\n  NodeTypes,\n  isNode,\n  isEdge,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nimport { WorkflowState, Task } from '../types';\nimport ApiSidebar from './ApiSidebar';\nimport JobsPanel from './JobsPanel';\nimport ResponseSelectorModal from './ResponseSelectorModal';\nimport TaskNode from './TaskNode';\nimport ApiNode from './ApiNode';\n\ninterface WorkflowBuilderProps {\n  workflowState: WorkflowState;\n  setWorkflowState: React.Dispatch<React.SetStateAction<WorkflowState>>;\n}\n\nconst WorkflowBuilder: React.FC<WorkflowBuilderProps> = ({\n  workflowState,\n  setWorkflowState,\n}) => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [isResponseModalOpen, setIsResponseModalOpen] = useState(false);\n  const [pendingConnection, setPendingConnection] = useState<Connection | null>(null);\n  const [selectedTask, setSelectedTask] = useState<Task | null>(null);\n  \n  // Audio references for sound effects\n  const clickSoundRef = useRef<HTMLAudioElement | null>(null);\n  const dropSoundRef = useRef<HTMLAudioElement | null>(null);\n  const connectSoundRef = useRef<HTMLAudioElement | null>(null);\n\n  // Initialize audio elements\n  React.useEffect(() => {\n    clickSoundRef.current = new Audio('/sounds/click.mp3');\n    dropSoundRef.current = new Audio('/sounds/drop.mp3');\n    connectSoundRef.current = new Audio('/sounds/connect.mp3');\n  }, []);\n\n  // Handle task selection\n  const handleTaskSelect = useCallback((task: Task) => {\n    // Play click sound\n    if (clickSoundRef.current) {\n      clickSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n    }\n    \n    setSelectedTask(task);\n    \n    // Create a new task node in the workflow\n    const taskNode: Node = {\n      id: `task-${task.id}-${Date.now()}`,\n      type: 'task', // Special node type for tasks\n      data: {\n        label: task.name,\n        task: task,\n        isTask: true, // Flag to identify task nodes\n      },\n      position: { x: 100, y: 100 + (nodes.length * 10) % 300 }, // Position the task node\n    };\n    \n    setNodes((nds) => [...nds, taskNode]);\n  }, [nodes]);\n  \n  // Handle API node drop\n  const handleApiDrop = useCallback((apiNodeData: any) => {\n    // Play drop sound\n    if (dropSoundRef.current) {\n      dropSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n    }\n    \n    try {\n      console.log('Raw API drop data:', apiNodeData);\n      \n      // Parse the API data if it's a string (from drag and drop)\n      let parsedData = typeof apiNodeData === 'string' ? JSON.parse(apiNodeData) : apiNodeData;\n      console.log('Parsed API data:', parsedData);\n      \n      // If the parsed data has a data property (from ReactFlow drag/drop), extract it\n      if (parsedData.data) {\n        console.log('Found nested data structure, extracting...');\n        // Keep the original parsed data for reference\n        const originalData = parsedData;\n        \n        // If there's an api object in the data, prioritize that\n        if (parsedData.data.api) {\n          console.log('Found API object in data.api');\n          // Merge the data structure to ensure we have all properties\n          parsedData = {\n            ...parsedData,\n            ...parsedData.data,\n            api: parsedData.data.api\n          };\n        } else {\n          // Otherwise just merge with the data object\n          parsedData = {...parsedData, ...parsedData.data};\n        }\n        \n        console.log('Restructured data:', parsedData);\n      }\n      \n      // Extract API name with extensive fallbacks\n      let apiName = '';\n      if (parsedData.api && parsedData.api.name) {\n        apiName = parsedData.api.name;\n      } else if (parsedData.name) {\n        apiName = parsedData.name;\n      } else if (parsedData.label) {\n        apiName = parsedData.label;\n      } else if (parsedData.data && parsedData.data.name) {\n        apiName = parsedData.data.name;\n      } else if (parsedData.data && parsedData.data.label) {\n        apiName = parsedData.data.label;\n      } else {\n        apiName = 'API Node';\n      }\n      \n      console.log('Extracted API name:', apiName);\n      \n      // Extract description with fallbacks\n      const apiDescription = parsedData.api?.description || \n                           parsedData.description || \n                           parsedData.data?.description || \n                           '';\n      \n      // Get responses and category with fallbacks\n      const responses = parsedData.api?.responses || \n                      parsedData.responses || \n                      parsedData.data?.api?.responses || \n                      [];\n                      \n      const category = parsedData.api?.category || \n                     parsedData.category || \n                     parsedData.data?.api?.category || \n                     '';\n      \n      // Create a new API node with the provided data\n      const apiNode: Node = {\n        id: `api-${Date.now()}`,\n        type: 'api', // Explicitly set the type to 'api'\n        position: { x: 400, y: 100 + (nodes.length * 10) % 300 }, // Position the API node\n        data: {\n          label: apiName, // Set label for display\n          name: apiName,  // Ensure name is set\n          description: apiDescription,\n          api: {\n            name: apiName, // Ensure API name is set\n            description: apiDescription,\n            responses: responses,\n            category: category\n          },\n          isApi: true // Additional flag to identify API nodes\n        }\n      };\n      \n      console.log('Created API node:', apiNode);\n      setNodes((nds) => [...nds, apiNode]);\n    } catch (error) {\n      console.error('Error handling API drop:', error);\n    }\n  }, [nodes]);\n\n  // Custom connection validation\n  const isValidConnection = useCallback((connection: Connection) => {\n    // Get source and target nodes\n    const sourceNode = nodes.find(node => node.id === connection.source);\n    const targetNode = nodes.find(node => node.id === connection.target);\n    \n    // Allow connections from task nodes to API nodes\n    if (sourceNode?.type === 'task' && targetNode?.type === 'api') {\n      // Play connect sound on valid connection attempt\n      if (connectSoundRef.current) {\n        connectSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n      }\n      return true;\n    }\n    \n    // Allow connections between API nodes (for sequential ordering)\n    if (sourceNode?.type === 'api' && targetNode?.type === 'api') {\n      // Check if connecting from bottom to top (proper direction)\n      if (connection.sourceHandle === 'bottom' && connection.targetHandle === 'top') {\n        // Play connect sound on valid connection attempt\n        if (connectSoundRef.current) {\n          connectSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n        }\n        return true;\n      }\n    }\n    \n    return false;\n  }, [nodes]);\n\n  const onConnect = useCallback(\n    (params: Connection) => {\n      // Validate connection\n      if (isValidConnection(params)) {\n        // Get source and target nodes\n        const sourceNode = nodes.find(node => node.id === params.source);\n        const targetNode = nodes.find(node => node.id === params.target);\n        \n        // Only show response selector for API-to-API connections\n        if (sourceNode?.type === 'api' && targetNode?.type === 'api') {\n          // Open response selector modal when connecting APIs\n          setPendingConnection(params);\n          setIsResponseModalOpen(true);\n        } else {\n          // For task-to-API connections, create the edge directly\n          setEdges((eds) => addEdge({ ...params, animated: true }, eds));\n        }\n      }\n    },\n    [isValidConnection, nodes, setEdges]\n  );\n\n  // Define node types for ReactFlow\n  const nodeTypes = React.useMemo<NodeTypes>(() => ({\n    task: TaskNode,\n    api: ApiNode,\n  }), []);\n\n  // Traverse workflow and export as JSON\n  const traverseWorkflow = useCallback(() => {\n    // Create a dot element for animation\n    const dotElement = document.createElement('div');\n    dotElement.style.position = 'absolute';\n    dotElement.style.width = '15px';\n    dotElement.style.height = '15px';\n    dotElement.style.backgroundColor = '#ff5722';\n    dotElement.style.borderRadius = '50%';\n    dotElement.style.zIndex = '1000';\n    dotElement.style.transition = 'all 0.5s ease';\n    \n    // Add the dot to the ReactFlow container\n    const reactFlowContainer = document.querySelector('.react-flow');\n    if (reactFlowContainer) {\n      reactFlowContainer.appendChild(dotElement);\n      \n      // Get all task nodes\n      const taskNodes = nodes.filter(node => node.type === 'task');\n      \n      // Get all API nodes\n      const apiNodes = nodes.filter(node => node.type === 'api');\n      \n      // Get all edges\n      const workflowEdges = edges;\n      \n      // Start animation from the first task node\n      if (taskNodes.length > 0) {\n        const startNode = taskNodes[0];\n        const nodeElement = document.querySelector(`[data-id=\"${startNode.id}\"]`);\n        \n        if (nodeElement) {\n          const rect = nodeElement.getBoundingClientRect();\n          const containerRect = reactFlowContainer.getBoundingClientRect();\n          \n          // Position the dot at the start node\n          dotElement.style.left = `${rect.left - containerRect.left + rect.width / 2 - 7.5}px`;\n          dotElement.style.top = `${rect.top - containerRect.top + rect.height / 2 - 7.5}px`;\n          \n          // Start the animation\n          setTimeout(() => animateWorkflow(dotElement, taskNodes, apiNodes, workflowEdges, 0), 500);\n        }\n      }\n    }\n  }, [nodes, edges]);\n  \n  // Animate the workflow traversal\n  const animateWorkflow = useCallback((dotElement: HTMLDivElement, taskNodes: Node[], apiNodes: Node[], workflowEdges: Edge[], currentIndex: number) => {\n    // If we've gone through all nodes, export the JSON\n    if (currentIndex >= taskNodes.length + apiNodes.length) {\n      // Remove the dot element\n      dotElement.remove();\n      \n      // Export the workflow as JSON\n      exportWorkflowAsJson();\n      return;\n    }\n    \n    // Determine the next node to animate to\n    let nextNode;\n    if (currentIndex < taskNodes.length) {\n      // Animate to the next task node\n      nextNode = taskNodes[currentIndex];\n    } else {\n      // Animate to the API nodes\n      nextNode = apiNodes[currentIndex - taskNodes.length];\n    }\n    \n    // Find the element for the next node\n    const nodeElement = document.querySelector(`[data-id=\"${nextNode.id}\"]`);\n    if (nodeElement) {\n      const rect = nodeElement.getBoundingClientRect();\n      const reactFlowElement = document.querySelector('.react-flow');\n      if (!reactFlowElement) return;\n      const containerRect = reactFlowElement.getBoundingClientRect();\n      \n      // Animate the dot to the next node\n      dotElement.style.left = `${rect.left - containerRect.left + rect.width / 2 - 7.5}px`;\n      dotElement.style.top = `${rect.top - containerRect.top + rect.height / 2 - 7.5}px`;\n      \n      // Highlight the node\n      nodeElement.classList.add('highlighted');\n      setTimeout(() => nodeElement.classList.remove('highlighted'), 500);\n      \n      // Continue to the next node after a delay\n      setTimeout(() => animateWorkflow(dotElement, taskNodes, apiNodes, workflowEdges, currentIndex + 1), 800);\n    } else {\n      // Skip to the next node if this one isn't found\n      setTimeout(() => animateWorkflow(dotElement, taskNodes, apiNodes, workflowEdges, currentIndex + 1), 100);\n    }\n  }, []);\n  \n  // Export the workflow as JSON\n  const exportWorkflowAsJson = useCallback(() => {\n    console.log('Starting JSON export...');\n    console.log('All nodes:', nodes);\n    \n    // Enhanced API node detection - use multiple detection methods with more detailed logging\n    const apiNodes = nodes.filter(node => {\n      console.log(`Checking node for API - ID: ${node.id}, Type: ${node.type}`, node);\n      console.log('Node data:', node.data);\n      \n      // Check if node is an API node using various properties\n      const isApiType = node.type === 'api';\n      const hasApiFlag = node.data && node.data.isApi === true;\n      const hasApiData = node.data && node.data.api;\n      const hasApiId = node.id && node.id.startsWith('api-');\n      \n      console.log(`API detection results - isApiType: ${isApiType}, hasApiFlag: ${hasApiFlag}, hasApiData: ${hasApiData}, hasApiId: ${hasApiId}`);\n      \n      return isApiType || hasApiFlag || hasApiData || hasApiId;\n    });\n    \n    console.log(`API nodes detected: ${apiNodes.length}`, apiNodes);\n    \n    // Always use the detected API nodes - no fallback to non-API nodes\n    // This ensures we only generate JSON for actual API nodes\n    let finalApiNodes = apiNodes;\n    \n    // Create the JSON structure as specified\n    const workflowJson = finalApiNodes.map(node => {\n      console.log('Processing node:', node);\n      // Get the node data\n      const nodeData = node.data || {};\n      const nodeId = node.id;\n      \n      // Find connected task node (incoming connection to this API)\n      const incomingEdges = edges.filter(edge => edge.target === nodeId);\n      console.log('Incoming edges:', incomingEdges);\n      \n      let connectedTaskNode = null;\n      let eventGroup = null;\n      \n      if (incomingEdges.length > 0) {\n        const sourceNodeId = incomingEdges[0].source;\n        connectedTaskNode = nodes.find(n => n.id === sourceNodeId && (n.type === 'task' || (n.data && n.data.task)));\n        console.log('Connected task node:', connectedTaskNode);\n        \n        if (connectedTaskNode && connectedTaskNode.data && connectedTaskNode.data.task) {\n          eventGroup = connectedTaskNode.data.task.name;\n        }\n      }\n      \n      // Generate a unique ID for the touchpoint\n      const touchpointId = `${Math.random().toString(36).substring(2, 15)}-${Math.random().toString(36).substring(2, 15)}`;\n      \n      // Get API name safely\n      let apiName = '';\n      if (nodeData.api && nodeData.api.name) {\n        apiName = nodeData.api.name;\n      } else if (nodeData.label) {\n        apiName = nodeData.label;\n      } else {\n        apiName = `api_${nodeId}`;\n      }\n      \n      console.log('API name:', apiName, 'Event group:', eventGroup);\n      \n      // Create the base JSON structure exactly matching the provided sample\n      const jsonItem = {\n        id: String(Math.floor(Math.random() * 1000)), // Random ID between 0-999\n        investor_name: workflowState.lenderName.toLowerCase(),\n        api_name: apiName,\n        retry_config: { max_retry: 4, retry_interval: 400 },\n        failure_retry_config: null,\n        event_group: eventGroup,\n        order: 1,\n        integration_type: 4,\n        http_method: 1,\n        investor_workflow_id: \"3\",\n        timeout: null,\n        domain: \"\",\n        end_point: \"\",\n        api_for: 19,\n        api_type: 0,\n        action_on_success_1: [],\n        action_on_success_2: [],\n        action_on_success_3: [],\n        action_on_failure_1: [],\n        action_on_failure_2: [],\n        param_conditions: {},\n        hold_api_call: false,\n        delay_trigger: 0,\n        inter_loan_gap: 0,\n        execution: 0,\n        trigger_child_api_if_conditions_not_met: false,\n        should_retry_if_conditions_not_met: false,\n        skip_unique_validation: false,\n        enable_touchpoint: true,\n        auth_api_name: null,\n        require_encryption: true,\n        document_details: {},\n        dedupe_check: false,\n        mock_server: false,\n        data_points_values: [],\n        lss_touchpoint_id: touchpointId,\n        investor_configuration_id: \"55\",\n        created_at: new Date().toISOString().replace('T', ' ').substring(0, 19),\n        updated_at: new Date().toISOString().replace('T', ' ').substring(0, 19),\n        dependent_event_group: null,\n        ysf_config: {}\n      };\n      \n      // Find connected API nodes for success actions (outgoing connections from this API)\n      const outgoingEdges = edges.filter(edge => edge.source === nodeId);\n      console.log('Outgoing edges:', outgoingEdges);\n      \n      if (outgoingEdges.length > 0) {\n        // Group target APIs by action index\n        const successActions: {[key: string]: string[]} = {\n          action_on_success_1: [],\n          action_on_success_2: [],\n          action_on_success_3: []\n        };\n        \n        outgoingEdges.forEach((edge, index) => {\n          if (index < 3) { // Only handle up to 3 success actions\n            const targetNode = nodes.find(n => n.id === edge.target);\n            console.log('Target node for success action:', targetNode);\n            \n            if (targetNode) {\n              let targetApiName = '';\n              \n              if (targetNode.data && targetNode.data.api && targetNode.data.api.name) {\n                targetApiName = targetNode.data.api.name;\n              } else if (targetNode.data && targetNode.data.label) {\n                targetApiName = targetNode.data.label;\n              } else {\n                targetApiName = `api_${targetNode.id}`;\n              }\n              \n              const actionKey = `action_on_success_${index + 1}`;\n              successActions[actionKey].push(targetApiName);\n              console.log(`Adding to ${actionKey}:`, targetApiName);\n            }\n          }\n        });\n        \n        // Assign the success actions to the JSON item\n        (jsonItem as any).action_on_success_1 = successActions.action_on_success_1;\n        (jsonItem as any).action_on_success_2 = successActions.action_on_success_2;\n        (jsonItem as any).action_on_success_3 = successActions.action_on_success_3;\n      }\n      \n      return jsonItem;\n    });\n    \n    // Display the JSON in the console\n    console.log('Final JSON output:', JSON.stringify(workflowJson, null, 2));\n    \n    // If the JSON is empty, show an error message instead of creating a fallback\n    if (workflowJson.length === 0) {\n      console.log('No API nodes found in the workflow');\n      alert('Error: No API nodes detected in the workflow. Please add API nodes by dragging them from the sidebar.');\n      return; // Exit without creating a fallback JSON\n    }\n    // Create a downloadable JSON file\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(workflowJson));\n    const downloadAnchorNode = document.createElement('a');\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", `${workflowState.lenderName}_workflow.json`);\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n    \n    // Show a success message\n    alert('Workflow exported successfully!');\n  }, [nodes, edges, workflowState]);\n\n  const handleResponseSelection = useCallback(\n    (responseId: string) => {\n      if (pendingConnection) {\n        const newEdge = {\n          ...pendingConnection,\n          id: `edge-${pendingConnection.source}-${pendingConnection.target}`,\n          data: { responseId },\n        };\n        setEdges((eds) => addEdge(newEdge, eds));\n        setPendingConnection(null);\n        \n        // Play connect sound when connection is completed\n        if (connectSoundRef.current) {\n          connectSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n        }\n      }\n      setIsResponseModalOpen(false);\n    },\n    [pendingConnection, setEdges]\n  );\n\n  return (\n    <Box sx={{ height: '100vh', display: 'flex' }}>\n      {/* Header */}\n      <Box\n        sx={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          zIndex: 1000,\n          backgroundColor: 'white',\n          borderBottom: '1px solid #e0e0e0',\n          p: 2,\n        }}\n      >\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <Typography variant=\"h6\">LSS Workflow Builder</Typography>\n          <Chip label={`Asset: ${workflowState.assetClass}`} color=\"primary\" />\n          <Chip label={`Lender: ${workflowState.lenderName}`} color=\"secondary\" />\n          <Button \n            variant=\"outlined\" \n            startIcon={<ArrowBackIcon />}\n            onClick={() => {\n              // Reset the workflow state and go back to setup form\n              setWorkflowState({\n                assetClass: '',\n                lenderName: '',\n                nodes: [],\n                edges: [],\n              });\n            }}\n            sx={{ mr: 2 }}\n          >\n            Back to Setup\n          </Button>\n          <Button \n            variant=\"contained\" \n            color=\"success\"\n            onClick={() => traverseWorkflow()}\n            disabled={nodes.length === 0}\n          >\n            Traverse & Export\n          </Button>\n        </Box>\n      </Box>\n\n      {/* API Sidebar */}\n      <ApiSidebar lenderName={workflowState.lenderName} />\n\n      {/* Main Canvas Area */}\n      <Box sx={{ flex: 1, mt: 8 }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          nodeTypes={nodeTypes}\n          fitView\n          // Using default connection mode\n          defaultEdgeOptions={{ animated: true }}\n          onDrop={(event) => {\n            event.preventDefault();\n            const data = event.dataTransfer.getData('application/reactflow');\n            if (data) {\n              // Get the position where the node was dropped\n              const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n              const position = {\n                x: event.clientX - reactFlowBounds.left,\n                y: event.clientY - reactFlowBounds.top,\n              };\n              \n              // Handle the API drop with the position\n              handleApiDrop(data);\n            }\n          }}\n          onDragOver={(event) => {\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'move';\n          }}\n        >\n          <Controls />\n          <Background variant={BackgroundVariant.Dots} gap={20} size={1} />\n        </ReactFlow>\n      </Box>\n\n      {/* Jobs Panel */}\n      <JobsPanel\n        onNodeAdd={(node) => {\n          // Handle API node addition\n          handleApiDrop(node);\n        }}\n        onTaskSelect={handleTaskSelect}\n      />\n\n      {/* Response Selector Modal */}\n      <ResponseSelectorModal\n        open={isResponseModalOpen}\n        onClose={() => {\n          setIsResponseModalOpen(false);\n          setPendingConnection(null);\n        }}\n        onSelect={handleResponseSelection}\n        sourceNodeId={pendingConnection?.source || ''}\n      />\n    </Box>\n  );\n};\n\nexport default WorkflowBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}