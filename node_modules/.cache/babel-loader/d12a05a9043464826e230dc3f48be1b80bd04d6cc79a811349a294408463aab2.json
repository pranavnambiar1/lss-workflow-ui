{"ast":null,"code":"var _jsxFileName = \"/Users/pranav.nambiar/Documents/lss-workflow-ui/src/components/WorkflowBuilder.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useRef } from 'react';\nimport { Box, Typography, Chip } from '@mui/material';\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, Controls, Background, BackgroundVariant } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport ApiSidebar from './ApiSidebar';\nimport JobsPanel from './JobsPanel';\nimport ResponseSelectorModal from './ResponseSelectorModal';\nimport TaskNode from './TaskNode';\nimport ApiNode from './ApiNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorkflowBuilder = ({\n  workflowState,\n  setWorkflowState\n}) => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [isResponseModalOpen, setIsResponseModalOpen] = useState(false);\n  const [pendingConnection, setPendingConnection] = useState(null);\n  const [selectedTask, setSelectedTask] = useState(null);\n\n  // Audio references for sound effects\n  const clickSoundRef = useRef(null);\n  const dropSoundRef = useRef(null);\n  const connectSoundRef = useRef(null);\n\n  // Initialize audio elements\n  React.useEffect(() => {\n    clickSoundRef.current = new Audio('/sounds/click.mp3');\n    dropSoundRef.current = new Audio('/sounds/drop.mp3');\n    connectSoundRef.current = new Audio('/sounds/connect.mp3');\n  }, []);\n\n  // Handle task selection\n  const handleTaskSelect = useCallback(task => {\n    // Play click sound\n    if (clickSoundRef.current) {\n      clickSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n    }\n    setSelectedTask(task);\n\n    // Create a new task node in the workflow\n    const taskNode = {\n      id: `task-${task.id}-${Date.now()}`,\n      type: 'task',\n      // Special node type for tasks\n      data: {\n        label: task.name,\n        task: task,\n        isTask: true // Flag to identify task nodes\n      },\n      position: {\n        x: 100,\n        y: 100 + nodes.length * 10 % 300\n      } // Position the task node\n    };\n    setNodes(nds => [...nds, taskNode]);\n  }, [nodes]);\n\n  // Handle API node drop\n  const handleApiDrop = useCallback(apiNodeData => {\n    // Play drop sound\n    if (dropSoundRef.current) {\n      dropSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n    }\n    try {\n      // Parse the API data if it's a string (from drag and drop)\n      const parsedData = typeof apiNodeData === 'string' ? JSON.parse(apiNodeData) : apiNodeData;\n\n      // Create a new API node with the provided data\n      const apiNode = {\n        ...(parsedData.id ? parsedData : {\n          id: `api-${Date.now()}`,\n          type: 'api',\n          data: {\n            label: 'API Node'\n          }\n        }),\n        id: `api-${Date.now()}`,\n        position: {\n          x: 400,\n          y: 100 + nodes.length * 10 % 300\n        } // Position the API node\n      };\n      setNodes(nds => [...nds, apiNode]);\n    } catch (error) {\n      console.error('Error handling API drop:', error);\n    }\n  }, [nodes]);\n\n  // Custom connection validation\n  const isValidConnection = useCallback(connection => {\n    var _sourceNode$data, _targetNode$data;\n    const sourceNode = nodes.find(node => node.id === connection.source);\n    const targetNode = nodes.find(node => node.id === connection.target);\n\n    // Only allow connections from task nodes to API nodes\n    if (sourceNode !== null && sourceNode !== void 0 && (_sourceNode$data = sourceNode.data) !== null && _sourceNode$data !== void 0 && _sourceNode$data.isTask && !(targetNode !== null && targetNode !== void 0 && (_targetNode$data = targetNode.data) !== null && _targetNode$data !== void 0 && _targetNode$data.isTask)) {\n      // Play connect sound on valid connection attempt\n      if (connectSoundRef.current) {\n        connectSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n      }\n      return true;\n    }\n    return false;\n  }, [nodes]);\n  const onConnect = useCallback(params => {\n    // Validate connection\n    if (isValidConnection(params)) {\n      // Open response selector modal when connecting nodes\n      setPendingConnection(params);\n      setIsResponseModalOpen(true);\n    }\n  }, [isValidConnection]);\n\n  // Define node types for ReactFlow\n  const nodeTypes = React.useMemo(() => ({\n    task: TaskNode,\n    api: ApiNode\n  }), []);\n  const handleResponseSelection = useCallback(responseId => {\n    if (pendingConnection) {\n      const newEdge = {\n        ...pendingConnection,\n        id: `edge-${pendingConnection.source}-${pendingConnection.target}`,\n        data: {\n          responseId\n        }\n      };\n      setEdges(eds => addEdge(newEdge, eds));\n      setPendingConnection(null);\n\n      // Play connect sound when connection is completed\n      if (connectSoundRef.current) {\n        connectSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n      }\n    }\n    setIsResponseModalOpen(false);\n  }, [pendingConnection, setEdges]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: '100vh',\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        zIndex: 1000,\n        backgroundColor: 'white',\n        borderBottom: '1px solid #e0e0e0',\n        p: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"LSS Workflow Builder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          label: `Asset: ${workflowState.assetClass}`,\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          label: `Lender: ${workflowState.lenderName}`,\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ApiSidebar, {\n      lenderName: workflowState.lenderName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flex: 1,\n        mt: 8\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        nodeTypes: nodeTypes,\n        fitView: true\n        // Using default connection mode\n        ,\n        defaultEdgeOptions: {\n          animated: true\n        },\n        onDrop: event => {\n          event.preventDefault();\n          const data = event.dataTransfer.getData('application/reactflow');\n          if (data) {\n            // Get the position where the node was dropped\n            const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n            const position = {\n              x: event.clientX - reactFlowBounds.left,\n              y: event.clientY - reactFlowBounds.top\n            };\n\n            // Handle the API drop with the position\n            handleApiDrop(data);\n          }\n        },\n        onDragOver: event => {\n          event.preventDefault();\n          event.dataTransfer.dropEffect = 'move';\n        },\n        children: [/*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {\n          variant: BackgroundVariant.Dots,\n          gap: 20,\n          size: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JobsPanel, {\n      onNodeAdd: node => {\n        // Handle API node addition\n        handleApiDrop(node);\n      },\n      onTaskSelect: handleTaskSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponseSelectorModal, {\n      open: isResponseModalOpen,\n      onClose: () => {\n        setIsResponseModalOpen(false);\n        setPendingConnection(null);\n      },\n      onSelect: handleResponseSelection,\n      sourceNodeId: (pendingConnection === null || pendingConnection === void 0 ? void 0 : pendingConnection.source) || ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(WorkflowBuilder, \"lVWnR6ddT9LDb5VCi1EN0bZXwaY=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = WorkflowBuilder;\nexport default WorkflowBuilder;\nvar _c;\n$RefreshReg$(_c, \"WorkflowBuilder\");","map":{"version":3,"names":["React","useCallback","useState","useRef","Box","Typography","Chip","ReactFlow","addEdge","useNodesState","useEdgesState","Controls","Background","BackgroundVariant","ApiSidebar","JobsPanel","ResponseSelectorModal","TaskNode","ApiNode","jsxDEV","_jsxDEV","WorkflowBuilder","workflowState","setWorkflowState","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","isResponseModalOpen","setIsResponseModalOpen","pendingConnection","setPendingConnection","selectedTask","setSelectedTask","clickSoundRef","dropSoundRef","connectSoundRef","useEffect","current","Audio","handleTaskSelect","task","play","catch","e","console","log","taskNode","id","Date","now","type","data","label","name","isTask","position","x","y","length","nds","handleApiDrop","apiNodeData","parsedData","JSON","parse","apiNode","error","isValidConnection","connection","_sourceNode$data","_targetNode$data","sourceNode","find","node","source","targetNode","target","onConnect","params","nodeTypes","useMemo","api","handleResponseSelection","responseId","newEdge","eds","sx","height","display","children","top","left","right","zIndex","backgroundColor","borderBottom","p","alignItems","gap","variant","fileName","_jsxFileName","lineNumber","columnNumber","assetClass","color","lenderName","flex","mt","fitView","defaultEdgeOptions","animated","onDrop","event","preventDefault","dataTransfer","getData","reactFlowBounds","currentTarget","getBoundingClientRect","clientX","clientY","onDragOver","dropEffect","Dots","size","onNodeAdd","onTaskSelect","open","onClose","onSelect","sourceNodeId","_c","$RefreshReg$"],"sources":["/Users/pranav.nambiar/Documents/lss-workflow-ui/src/components/WorkflowBuilder.tsx"],"sourcesContent":["import React, { useCallback, useState, useRef } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Chip,\n} from '@mui/material';\nimport ReactFlow, {\n  Node,\n  Edge,\n  addEdge,\n  Connection,\n  useNodesState,\n  useEdgesState,\n  Controls,\n  Background,\n  BackgroundVariant,\n  NodeTypes,\n  isNode,\n  isEdge,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\n\nimport { WorkflowState, Task } from '../types';\nimport ApiSidebar from './ApiSidebar';\nimport JobsPanel from './JobsPanel';\nimport ResponseSelectorModal from './ResponseSelectorModal';\nimport TaskNode from './TaskNode';\nimport ApiNode from './ApiNode';\n\ninterface WorkflowBuilderProps {\n  workflowState: WorkflowState;\n  setWorkflowState: React.Dispatch<React.SetStateAction<WorkflowState>>;\n}\n\nconst WorkflowBuilder: React.FC<WorkflowBuilderProps> = ({\n  workflowState,\n  setWorkflowState,\n}) => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [isResponseModalOpen, setIsResponseModalOpen] = useState(false);\n  const [pendingConnection, setPendingConnection] = useState<Connection | null>(null);\n  const [selectedTask, setSelectedTask] = useState<Task | null>(null);\n  \n  // Audio references for sound effects\n  const clickSoundRef = useRef<HTMLAudioElement | null>(null);\n  const dropSoundRef = useRef<HTMLAudioElement | null>(null);\n  const connectSoundRef = useRef<HTMLAudioElement | null>(null);\n\n  // Initialize audio elements\n  React.useEffect(() => {\n    clickSoundRef.current = new Audio('/sounds/click.mp3');\n    dropSoundRef.current = new Audio('/sounds/drop.mp3');\n    connectSoundRef.current = new Audio('/sounds/connect.mp3');\n  }, []);\n\n  // Handle task selection\n  const handleTaskSelect = useCallback((task: Task) => {\n    // Play click sound\n    if (clickSoundRef.current) {\n      clickSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n    }\n    \n    setSelectedTask(task);\n    \n    // Create a new task node in the workflow\n    const taskNode: Node = {\n      id: `task-${task.id}-${Date.now()}`,\n      type: 'task', // Special node type for tasks\n      data: {\n        label: task.name,\n        task: task,\n        isTask: true, // Flag to identify task nodes\n      },\n      position: { x: 100, y: 100 + (nodes.length * 10) % 300 }, // Position the task node\n    };\n    \n    setNodes((nds) => [...nds, taskNode]);\n  }, [nodes]);\n  \n  // Handle API node drop\n  const handleApiDrop = useCallback((apiNodeData: any) => {\n    // Play drop sound\n    if (dropSoundRef.current) {\n      dropSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n    }\n    \n    try {\n      // Parse the API data if it's a string (from drag and drop)\n      const parsedData = typeof apiNodeData === 'string' ? JSON.parse(apiNodeData) : apiNodeData;\n      \n      // Create a new API node with the provided data\n      const apiNode: Node = {\n        ...(parsedData.id ? parsedData : { id: `api-${Date.now()}`, type: 'api', data: { label: 'API Node' } }),\n        id: `api-${Date.now()}`,\n        position: { x: 400, y: 100 + (nodes.length * 10) % 300 }, // Position the API node\n      };\n      \n      setNodes((nds) => [...nds, apiNode]);\n    } catch (error) {\n      console.error('Error handling API drop:', error);\n    }\n  }, [nodes]);\n\n  // Custom connection validation\n  const isValidConnection = useCallback((connection: Connection) => {\n    const sourceNode = nodes.find(node => node.id === connection.source);\n    const targetNode = nodes.find(node => node.id === connection.target);\n    \n    // Only allow connections from task nodes to API nodes\n    if (sourceNode?.data?.isTask && !targetNode?.data?.isTask) {\n      // Play connect sound on valid connection attempt\n      if (connectSoundRef.current) {\n        connectSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n      }\n      return true;\n    }\n    \n    return false;\n  }, [nodes]);\n\n  const onConnect = useCallback(\n    (params: Connection) => {\n      // Validate connection\n      if (isValidConnection(params)) {\n        // Open response selector modal when connecting nodes\n        setPendingConnection(params);\n        setIsResponseModalOpen(true);\n      }\n    },\n    [isValidConnection]\n  );\n\n  // Define node types for ReactFlow\n  const nodeTypes = React.useMemo<NodeTypes>(() => ({\n    task: TaskNode,\n    api: ApiNode,\n  }), []);\n\n  const handleResponseSelection = useCallback(\n    (responseId: string) => {\n      if (pendingConnection) {\n        const newEdge = {\n          ...pendingConnection,\n          id: `edge-${pendingConnection.source}-${pendingConnection.target}`,\n          data: { responseId },\n        };\n        setEdges((eds) => addEdge(newEdge, eds));\n        setPendingConnection(null);\n        \n        // Play connect sound when connection is completed\n        if (connectSoundRef.current) {\n          connectSoundRef.current.play().catch(e => console.log('Audio play failed:', e));\n        }\n      }\n      setIsResponseModalOpen(false);\n    },\n    [pendingConnection, setEdges]\n  );\n\n  return (\n    <Box sx={{ height: '100vh', display: 'flex' }}>\n      {/* Header */}\n      <Box\n        sx={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          zIndex: 1000,\n          backgroundColor: 'white',\n          borderBottom: '1px solid #e0e0e0',\n          p: 2,\n        }}\n      >\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <Typography variant=\"h6\">LSS Workflow Builder</Typography>\n          <Chip label={`Asset: ${workflowState.assetClass}`} color=\"primary\" />\n          <Chip label={`Lender: ${workflowState.lenderName}`} color=\"secondary\" />\n        </Box>\n      </Box>\n\n      {/* API Sidebar */}\n      <ApiSidebar lenderName={workflowState.lenderName} />\n\n      {/* Main Canvas Area */}\n      <Box sx={{ flex: 1, mt: 8 }}>\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          nodeTypes={nodeTypes}\n          fitView\n          // Using default connection mode\n          defaultEdgeOptions={{ animated: true }}\n          onDrop={(event) => {\n            event.preventDefault();\n            const data = event.dataTransfer.getData('application/reactflow');\n            if (data) {\n              // Get the position where the node was dropped\n              const reactFlowBounds = event.currentTarget.getBoundingClientRect();\n              const position = {\n                x: event.clientX - reactFlowBounds.left,\n                y: event.clientY - reactFlowBounds.top,\n              };\n              \n              // Handle the API drop with the position\n              handleApiDrop(data);\n            }\n          }}\n          onDragOver={(event) => {\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'move';\n          }}\n        >\n          <Controls />\n          <Background variant={BackgroundVariant.Dots} gap={20} size={1} />\n        </ReactFlow>\n      </Box>\n\n      {/* Jobs Panel */}\n      <JobsPanel\n        onNodeAdd={(node) => {\n          // Handle API node addition\n          handleApiDrop(node);\n        }}\n        onTaskSelect={handleTaskSelect}\n      />\n\n      {/* Response Selector Modal */}\n      <ResponseSelectorModal\n        open={isResponseModalOpen}\n        onClose={() => {\n          setIsResponseModalOpen(false);\n          setPendingConnection(null);\n        }}\n        onSelect={handleResponseSelection}\n        sourceNodeId={pendingConnection?.source || ''}\n      />\n    </Box>\n  );\n};\n\nexport default WorkflowBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}